/*
    publipha is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    publipha is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with publipha.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.0

#include <stan/model/model_header.hpp>

namespace model_phma_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_phma");
    reader.add_event(1, 1, "include", "/chunks/phma_likelihoods.stan");
    reader.add_event(1, 0, "start", "/chunks/phma_likelihoods.stan");
    reader.add_event(1, 0, "include", "/chunks/densities.stan");
    reader.add_event(1, 0, "start", "/chunks/densities.stan");
    reader.add_event(86, 85, "end", "/chunks/densities.stan");
    reader.add_event(86, 1, "restart", "/chunks/phma_likelihoods.stan");
    reader.add_event(128, 43, "end", "/chunks/phma_likelihoods.stan");
    reader.add_event(128, 2, "restart", "model_phma");
    reader.add_event(184, 56, "end", "model_phma");
    return reader;
}

template <bool propto, typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
fnormal_lpdf(const T0__& y,
                 const T1__& mean,
                 const T2__& sd, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 12;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_sum_exp(normal_log(y,mean,sd),normal_log(y,-(mean),sd)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
fnormal_lpdf(const T0__& y,
                 const T1__& mean,
                 const T2__& sd, std::ostream* pstream__) {
    return fnormal_lpdf<false>(y,mean,sd, pstream__);
}


struct fnormal_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& y,
                 const T1__& mean,
                 const T2__& sd, std::ostream* pstream__) const {
        return fnormal_lpdf(y, mean, sd, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
fnormal_cdf(const T0__& y,
                const T1__& mean,
                const T2__& sd, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 16;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((normal_cdf(y,mean,sd) + normal_cdf(y,-(mean),sd)) - sd));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct fnormal_cdf_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& y,
                const T1__& mean,
                const T2__& sd, std::ostream* pstream__) const {
        return fnormal_cdf(y, mean, sd, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
fnormal_ccdf(const T0__& y,
                 const T1__& mean,
                 const T2__& sd, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 20;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((2 - normal_cdf(y,mean,sd)) - normal_cdf(y,-(mean),sd)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct fnormal_ccdf_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& y,
                 const T1__& mean,
                 const T2__& sd, std::ostream* pstream__) const {
        return fnormal_ccdf(y, mean, sd, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
fnormal_lcdf(const T0__& y,
                 const T1__& mean,
                 const T2__& sd, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 24;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::log(((normal_cdf(y,mean,sd) + normal_cdf(y,-(mean),sd)) - sd)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct fnormal_lcdf_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& y,
                 const T1__& mean,
                 const T2__& sd, std::ostream* pstream__) const {
        return fnormal_lcdf(y, mean, sd, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
fnormal_lccdf(const T0__& y,
                  const T1__& mean,
                  const T2__& sd, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 29;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::log(((2 - normal_cdf(y,mean,sd)) - normal_cdf(y,-(mean),sd))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct fnormal_lccdf_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& y,
                  const T1__& mean,
                  const T2__& sd, std::ostream* pstream__) const {
        return fnormal_lccdf(y, mean, sd, pstream__);
    }
};

template <typename T0__, typename T1__, class RNG>
typename boost::math::tools::promote_args<T0__, T1__>::type
fnormal_rng(const T0__& mean,
                const T1__& sd, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 33;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::fabs(normal_rng(mean,sd, base_rng__)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct fnormal_rng_functor__ {
    template <typename T0__, typename T1__, class RNG>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& mean,
                const T1__& sd, RNG& base_rng__, std::ostream* pstream__) const {
        return fnormal_rng(mean, sd, base_rng__, pstream__);
    }
};

template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
lower_fnormal_lpdf(const T0__& y,
                       const T1__& mean,
                       const T2__& sd,
                       const T3__& lower, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 51;
        return stan::math::promote_scalar<fun_return_scalar_t__>((fnormal_lpdf(y,mean,sd, pstream__) - fnormal_lccdf(lower,mean,sd, pstream__)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
lower_fnormal_lpdf(const T0__& y,
                       const T1__& mean,
                       const T2__& sd,
                       const T3__& lower, std::ostream* pstream__) {
    return lower_fnormal_lpdf<false>(y,mean,sd,lower, pstream__);
}


struct lower_fnormal_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& y,
                       const T1__& mean,
                       const T2__& sd,
                       const T3__& lower, std::ostream* pstream__) const {
        return lower_fnormal_lpdf(y, mean, sd, lower, pstream__);
    }
};

template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
upper_fnormal_lpdf(const T0__& y,
                       const T1__& mean,
                       const T2__& sd,
                       const T3__& upper, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 55;
        return stan::math::promote_scalar<fun_return_scalar_t__>((fnormal_lpdf(y,mean,sd, pstream__) - fnormal_lcdf(upper,mean,sd, pstream__)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
upper_fnormal_lpdf(const T0__& y,
                       const T1__& mean,
                       const T2__& sd,
                       const T3__& upper, std::ostream* pstream__) {
    return upper_fnormal_lpdf<false>(y,mean,sd,upper, pstream__);
}


struct upper_fnormal_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& y,
                       const T1__& mean,
                       const T2__& sd,
                       const T3__& upper, std::ostream* pstream__) const {
        return upper_fnormal_lpdf(y, mean, sd, upper, pstream__);
    }
};

template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
inner_fnormal_lpdf(const T0__& y,
                       const T1__& mean,
                       const T2__& sd,
                       const T3__& lower,
                       const T4__& upper, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 59;
        return stan::math::promote_scalar<fun_return_scalar_t__>((fnormal_lpdf(y,mean,sd, pstream__) - stan::math::log((fnormal_cdf(upper,mean,sd, pstream__) - fnormal_cdf(lower,mean,sd, pstream__)))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
inner_fnormal_lpdf(const T0__& y,
                       const T1__& mean,
                       const T2__& sd,
                       const T3__& lower,
                       const T4__& upper, std::ostream* pstream__) {
    return inner_fnormal_lpdf<false>(y,mean,sd,lower,upper, pstream__);
}


struct inner_fnormal_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const T0__& y,
                       const T1__& mean,
                       const T2__& sd,
                       const T3__& lower,
                       const T4__& upper, std::ostream* pstream__) const {
        return inner_fnormal_lpdf(y, mean, sd, lower, upper, pstream__);
    }
};

template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
double_fnormal_lpdf(const T0__& y,
                        const T1__& mean,
                        const T2__& sd,
                        const T3__& lower,
                        const T4__& upper, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 65;
        return stan::math::promote_scalar<fun_return_scalar_t__>((fnormal_lpdf(y,mean,sd, pstream__) - stan::math::log((fnormal_cdf(upper,mean,sd, pstream__) + fnormal_ccdf(lower,mean,sd, pstream__)))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
double_fnormal_lpdf(const T0__& y,
                        const T1__& mean,
                        const T2__& sd,
                        const T3__& lower,
                        const T4__& upper, std::ostream* pstream__) {
    return double_fnormal_lpdf<false>(y,mean,sd,lower,upper, pstream__);
}


struct double_fnormal_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const T0__& y,
                        const T1__& mean,
                        const T2__& sd,
                        const T3__& lower,
                        const T4__& upper, std::ostream* pstream__) const {
        return double_fnormal_lpdf(y, mean, sd, lower, upper, pstream__);
    }
};

template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
lower_normal_lpdf(const T0__& y,
                      const T1__& mean,
                      const T2__& sd,
                      const T3__& lower, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 70;
        return stan::math::promote_scalar<fun_return_scalar_t__>((normal_log(y,mean,sd) - normal_ccdf_log(lower,mean,sd)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
lower_normal_lpdf(const T0__& y,
                      const T1__& mean,
                      const T2__& sd,
                      const T3__& lower, std::ostream* pstream__) {
    return lower_normal_lpdf<false>(y,mean,sd,lower, pstream__);
}


struct lower_normal_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& y,
                      const T1__& mean,
                      const T2__& sd,
                      const T3__& lower, std::ostream* pstream__) const {
        return lower_normal_lpdf(y, mean, sd, lower, pstream__);
    }
};

template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
upper_normal_lpdf(const T0__& y,
                      const T1__& mean,
                      const T2__& sd,
                      const T3__& upper, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 74;
        return stan::math::promote_scalar<fun_return_scalar_t__>((normal_log(y,mean,sd) - normal_cdf_log(upper,mean,sd)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
upper_normal_lpdf(const T0__& y,
                      const T1__& mean,
                      const T2__& sd,
                      const T3__& upper, std::ostream* pstream__) {
    return upper_normal_lpdf<false>(y,mean,sd,upper, pstream__);
}


struct upper_normal_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& y,
                      const T1__& mean,
                      const T2__& sd,
                      const T3__& upper, std::ostream* pstream__) const {
        return upper_normal_lpdf(y, mean, sd, upper, pstream__);
    }
};

template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
inner_normal_lpdf(const T0__& y,
                      const T1__& mean,
                      const T2__& sd,
                      const T3__& lower,
                      const T4__& upper, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 78;
        return stan::math::promote_scalar<fun_return_scalar_t__>((normal_log(y,mean,sd) - stan::math::log((normal_cdf(upper,mean,sd) - normal_cdf(lower,mean,sd)))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
inner_normal_lpdf(const T0__& y,
                      const T1__& mean,
                      const T2__& sd,
                      const T3__& lower,
                      const T4__& upper, std::ostream* pstream__) {
    return inner_normal_lpdf<false>(y,mean,sd,lower,upper, pstream__);
}


struct inner_normal_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const T0__& y,
                      const T1__& mean,
                      const T2__& sd,
                      const T3__& lower,
                      const T4__& upper, std::ostream* pstream__) const {
        return inner_normal_lpdf(y, mean, sd, lower, upper, pstream__);
    }
};

template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
double_normal_lpdf(const T0__& y,
                       const T1__& mean,
                       const T2__& sd,
                       const T3__& lower,
                       const T4__& upper, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 84;
        return stan::math::promote_scalar<fun_return_scalar_t__>((normal_log(y,mean,sd) - stan::math::log((normal_cdf(upper,mean,sd) + normal_cdf(-(lower),-(mean),sd)))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
double_normal_lpdf(const T0__& y,
                       const T1__& mean,
                       const T2__& sd,
                       const T3__& lower,
                       const T4__& upper, std::ostream* pstream__) {
    return double_normal_lpdf<false>(y,mean,sd,lower,upper, pstream__);
}


struct double_normal_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const T0__& y,
                       const T1__& mean,
                       const T2__& sd,
                       const T3__& lower,
                       const T4__& upper, std::ostream* pstream__) const {
        return double_normal_lpdf(y, mean, sd, lower, upper, pstream__);
    }
};

template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
phma_normal_lpdf(const T0__& x,
                     const T1__& theta,
                     const T2__& sigma,
                     const std::vector<T3__>& alpha,
                     const Eigen::Matrix<T4__, Eigen::Dynamic,1>& eta, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 89;
        int k(0);
        (void) k;  // dummy to suppress unused var warning

        stan::math::fill(k, std::numeric_limits<int>::min());
        stan::math::assign(k,size(alpha));
        current_statement_begin__ = 90;
        validate_non_negative_index("y", "(k - 1)", (k - 1));
        vector<local_scalar_t__> y((k - 1));
        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y,DUMMY_VAR__);
        current_statement_begin__ = 91;
        local_scalar_t__ u;
        (void) u;  // dummy to suppress unused var warning

        stan::math::initialize(u, DUMMY_VAR__);
        stan::math::fill(u,DUMMY_VAR__);
        stan::math::assign(u,(1 - normal_cdf(x,0,sigma)));
        current_statement_begin__ = 92;
        local_scalar_t__ cutoff;
        (void) cutoff;  // dummy to suppress unused var warning

        stan::math::initialize(cutoff, DUMMY_VAR__);
        stan::math::fill(cutoff,DUMMY_VAR__);


        current_statement_begin__ = 94;
        for (int i = 1; i <= (k - 2); ++i) {

            current_statement_begin__ = 95;
            if (as_bool(logical_lt(get_base1(alpha,(i + 1),"alpha",1),u))) {

                current_statement_begin__ = 96;
                stan::model::assign(y, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::negative_infinity(), 
                            "assigning variable y");
            } else {

                current_statement_begin__ = 98;
                stan::math::assign(cutoff, inv_Phi((1 - get_base1(alpha,(i + 1),"alpha",1))));
                current_statement_begin__ = 99;
                stan::model::assign(y, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (stan::math::log(get_base1(eta,i,"eta",1)) - normal_ccdf_log(cutoff,(theta / sigma),1)), 
                            "assigning variable y");
            }
        }
        current_statement_begin__ = 103;
        stan::model::assign(y, 
                    stan::model::cons_list(stan::model::index_uni((k - 1)), stan::model::nil_index_list()), 
                    stan::math::log(get_base1(eta,(k - 1),"eta",1)), 
                    "assigning variable y");
        current_statement_begin__ = 104;
        return stan::math::promote_scalar<fun_return_scalar_t__>((log_sum_exp(y) + normal_log(x,theta,sigma)));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
phma_normal_lpdf(const T0__& x,
                     const T1__& theta,
                     const T2__& sigma,
                     const std::vector<T3__>& alpha,
                     const Eigen::Matrix<T4__, Eigen::Dynamic,1>& eta, std::ostream* pstream__) {
    return phma_normal_lpdf<false>(x,theta,sigma,alpha,eta, pstream__);
}


struct phma_normal_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const T0__& x,
                     const T1__& theta,
                     const T2__& sigma,
                     const std::vector<T3__>& alpha,
                     const Eigen::Matrix<T4__, Eigen::Dynamic,1>& eta, std::ostream* pstream__) const {
        return phma_normal_lpdf(x, theta, sigma, alpha, eta, pstream__);
    }
};

template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
phma_fnormal_lpdf(const T0__& x,
                      const T1__& theta,
                      const T2__& sigma,
                      const std::vector<T3__>& alpha,
                      const Eigen::Matrix<T4__, Eigen::Dynamic,1>& eta, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 109;
        int k(0);
        (void) k;  // dummy to suppress unused var warning

        stan::math::fill(k, std::numeric_limits<int>::min());
        stan::math::assign(k,size(alpha));
        current_statement_begin__ = 110;
        local_scalar_t__ y;
        (void) y;  // dummy to suppress unused var warning

        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y,DUMMY_VAR__);
        stan::math::assign(y,fnormal_lpdf(x,theta,sigma, pstream__));
        current_statement_begin__ = 111;
        local_scalar_t__ u;
        (void) u;  // dummy to suppress unused var warning

        stan::math::initialize(u, DUMMY_VAR__);
        stan::math::fill(u,DUMMY_VAR__);
        stan::math::assign(u,((1 - normal_cdf(x,0,sigma)) * 2));
        current_statement_begin__ = 112;
        local_scalar_t__ cutoff;
        (void) cutoff;  // dummy to suppress unused var warning

        stan::math::initialize(cutoff, DUMMY_VAR__);
        stan::math::fill(cutoff,DUMMY_VAR__);


        current_statement_begin__ = 114;
        for (int i = 2; i <= (k - 1); ++i) {

            current_statement_begin__ = 115;
            if (as_bool(logical_lt(get_base1(alpha,i,"alpha",1),u))) {
                current_statement_begin__ = 115;
                break;
            }
            current_statement_begin__ = 116;
            stan::math::assign(cutoff, (inv_Phi((1 - (get_base1(alpha,i,"alpha",1) / 2))) * sigma));
            current_statement_begin__ = 117;
            stan::math::assign(y, (y + (stan::math::log(get_base1(eta,i,"eta",1)) - fnormal_lccdf(cutoff,theta,sigma, pstream__))));
        }
        current_statement_begin__ = 120;
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
phma_fnormal_lpdf(const T0__& x,
                      const T1__& theta,
                      const T2__& sigma,
                      const std::vector<T3__>& alpha,
                      const Eigen::Matrix<T4__, Eigen::Dynamic,1>& eta, std::ostream* pstream__) {
    return phma_fnormal_lpdf<false>(x,theta,sigma,alpha,eta, pstream__);
}


struct phma_fnormal_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const T0__& x,
                      const T1__& theta,
                      const T2__& sigma,
                      const std::vector<T3__>& alpha,
                      const Eigen::Matrix<T4__, Eigen::Dynamic,1>& eta, std::ostream* pstream__) const {
        return phma_fnormal_lpdf(x, theta, sigma, alpha, eta, pstream__);
    }
};

#include <meta_header.hpp>
 class model_phma : public prob_grad {
private:
    int N;
    int k;
    vector<double> alpha;
    vector<double> yi;
    vector<double> vi;
    vector<int> likelihood;
    vector_d eta0;
    double theta0_mean;
    double theta0_sd;
    double tau_mean;
    double tau_sd;
public:
    model_phma(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_phma(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_phma_namespace::model_phma";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 134;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 135;
            context__.validate_dims("data initialization", "k", "int", context__.to_vec());
            k = int(0);
            vals_i__ = context__.vals_i("k");
            pos__ = 0;
            k = vals_i__[pos__++];
            current_statement_begin__ = 136;
            validate_non_negative_index("alpha", "k", k);
            context__.validate_dims("data initialization", "alpha", "double", context__.to_vec(k));
            validate_non_negative_index("alpha", "k", k);
            alpha = std::vector<double>(k,double(0));
            vals_r__ = context__.vals_r("alpha");
            pos__ = 0;
            size_t alpha_limit_0__ = k;
            for (size_t i_0__ = 0; i_0__ < alpha_limit_0__; ++i_0__) {
                alpha[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 137;
            validate_non_negative_index("yi", "N", N);
            context__.validate_dims("data initialization", "yi", "double", context__.to_vec(N));
            validate_non_negative_index("yi", "N", N);
            yi = std::vector<double>(N,double(0));
            vals_r__ = context__.vals_r("yi");
            pos__ = 0;
            size_t yi_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < yi_limit_0__; ++i_0__) {
                yi[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 138;
            validate_non_negative_index("vi", "N", N);
            context__.validate_dims("data initialization", "vi", "double", context__.to_vec(N));
            validate_non_negative_index("vi", "N", N);
            vi = std::vector<double>(N,double(0));
            vals_r__ = context__.vals_r("vi");
            pos__ = 0;
            size_t vi_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < vi_limit_0__; ++i_0__) {
                vi[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 139;
            validate_non_negative_index("likelihood", "N", N);
            context__.validate_dims("data initialization", "likelihood", "int", context__.to_vec(N));
            validate_non_negative_index("likelihood", "N", N);
            likelihood = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("likelihood");
            pos__ = 0;
            size_t likelihood_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < likelihood_limit_0__; ++i_0__) {
                likelihood[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 142;
            validate_non_negative_index("eta0", "(k - 1)", (k - 1));
            context__.validate_dims("data initialization", "eta0", "vector_d", context__.to_vec((k - 1)));
            validate_non_negative_index("eta0", "(k - 1)", (k - 1));
            eta0 = vector_d(static_cast<Eigen::VectorXd::Index>((k - 1)));
            vals_r__ = context__.vals_r("eta0");
            pos__ = 0;
            size_t eta0_i_vec_lim__ = (k - 1);
            for (size_t i_vec__ = 0; i_vec__ < eta0_i_vec_lim__; ++i_vec__) {
                eta0[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 143;
            context__.validate_dims("data initialization", "theta0_mean", "double", context__.to_vec());
            theta0_mean = double(0);
            vals_r__ = context__.vals_r("theta0_mean");
            pos__ = 0;
            theta0_mean = vals_r__[pos__++];
            current_statement_begin__ = 144;
            context__.validate_dims("data initialization", "theta0_sd", "double", context__.to_vec());
            theta0_sd = double(0);
            vals_r__ = context__.vals_r("theta0_sd");
            pos__ = 0;
            theta0_sd = vals_r__[pos__++];
            current_statement_begin__ = 145;
            context__.validate_dims("data initialization", "tau_mean", "double", context__.to_vec());
            tau_mean = double(0);
            vals_r__ = context__.vals_r("tau_mean");
            pos__ = 0;
            tau_mean = vals_r__[pos__++];
            current_statement_begin__ = 146;
            context__.validate_dims("data initialization", "tau_sd", "double", context__.to_vec());
            tau_sd = double(0);
            vals_r__ = context__.vals_r("tau_sd");
            pos__ = 0;
            tau_sd = vals_r__[pos__++];

            // validate, data variables
            current_statement_begin__ = 134;
            check_greater_or_equal(function__,"N",N,0);
            current_statement_begin__ = 135;
            check_greater_or_equal(function__,"k",k,0);
            current_statement_begin__ = 136;
            current_statement_begin__ = 137;
            current_statement_begin__ = 138;
            current_statement_begin__ = 139;
            current_statement_begin__ = 142;
            current_statement_begin__ = 143;
            current_statement_begin__ = 144;
            check_greater_or_equal(function__,"theta0_sd",theta0_sd,0);
            current_statement_begin__ = 145;
            current_statement_begin__ = 146;
            check_greater_or_equal(function__,"tau_sd",tau_sd,0);
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 152;
            ++num_params_r__;
            current_statement_begin__ = 153;
            ++num_params_r__;
            current_statement_begin__ = 154;
            validate_non_negative_index("eta", "(k - 1)", (k - 1));
            num_params_r__ += ((k - 1) - 1);
            current_statement_begin__ = 155;
            validate_non_negative_index("theta", "N", N);
            num_params_r__ += N;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_phma() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("theta0")))
            throw std::runtime_error("variable theta0 missing");
        vals_r__ = context__.vals_r("theta0");
        pos__ = 0U;
        context__.validate_dims("initialization", "theta0", "double", context__.to_vec());
        double theta0(0);
        theta0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(theta0);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable theta0: ") + e.what());
        }

        if (!(context__.contains_r("tau")))
            throw std::runtime_error("variable tau missing");
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        context__.validate_dims("initialization", "tau", "double", context__.to_vec());
        double tau(0);
        tau = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,tau);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau: ") + e.what());
        }

        if (!(context__.contains_r("eta")))
            throw std::runtime_error("variable eta missing");
        vals_r__ = context__.vals_r("eta");
        pos__ = 0U;
        validate_non_negative_index("eta", "(k - 1)", (k - 1));
        context__.validate_dims("initialization", "eta", "vector_d", context__.to_vec((k - 1)));
        vector_d eta(static_cast<Eigen::VectorXd::Index>((k - 1)));
        for (int j1__ = 0U; j1__ < (k - 1); ++j1__)
            eta(j1__) = vals_r__[pos__++];
        try {
            writer__.simplex_unconstrain(eta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable eta: ") + e.what());
        }

        if (!(context__.contains_r("theta")))
            throw std::runtime_error("variable theta missing");
        vals_r__ = context__.vals_r("theta");
        pos__ = 0U;
        validate_non_negative_index("theta", "N", N);
        context__.validate_dims("initialization", "theta", "double", context__.to_vec(N));
        std::vector<double> theta(N,double(0));
        for (int i0__ = 0U; i0__ < N; ++i0__)
            theta[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < N; ++i0__)
            try {
            writer__.scalar_unconstrain(theta[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable theta: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            local_scalar_t__ theta0;
            (void) theta0;  // dummy to suppress unused var warning
            if (jacobian__)
                theta0 = in__.scalar_constrain(lp__);
            else
                theta0 = in__.scalar_constrain();

            local_scalar_t__ tau;
            (void) tau;  // dummy to suppress unused var warning
            if (jacobian__)
                tau = in__.scalar_lb_constrain(0,lp__);
            else
                tau = in__.scalar_lb_constrain(0);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  eta;
            (void) eta;  // dummy to suppress unused var warning
            if (jacobian__)
                eta = in__.simplex_constrain((k - 1),lp__);
            else
                eta = in__.simplex_constrain((k - 1));

            vector<local_scalar_t__> theta;
            size_t dim_theta_0__ = N;
            theta.reserve(dim_theta_0__);
            for (size_t k_0__ = 0; k_0__ < dim_theta_0__; ++k_0__) {
                if (jacobian__)
                    theta.push_back(in__.scalar_constrain(lp__));
                else
                    theta.push_back(in__.scalar_constrain());
            }


            // transformed parameters



            // validate transformed parameters

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // model body

            current_statement_begin__ = 160;
            lp_accum__.add(normal_log<propto__>(theta0, theta0_mean, theta0_sd));
            current_statement_begin__ = 161;
            lp_accum__.add(normal_log<propto__>(tau, tau_mean, tau_sd));
            if (tau < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
            else lp_accum__.add(-normal_ccdf_log(0, tau_mean, tau_sd));
            current_statement_begin__ = 162;
            lp_accum__.add(dirichlet_log<propto__>(eta, eta0));
            current_statement_begin__ = 163;
            lp_accum__.add(normal_log<propto__>(theta, theta0, tau));
            current_statement_begin__ = 165;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 166;
                if (as_bool(logical_eq(get_base1(likelihood,n,"likelihood",1),0))) {

                    current_statement_begin__ = 167;
                    lp_accum__.add(phma_normal_lpdf<propto__>(get_base1(yi,n,"yi",1), get_base1(theta,n,"theta",1), stan::math::sqrt(get_base1(vi,n,"vi",1)), alpha, eta, pstream__));
                } else if (as_bool(logical_eq(get_base1(likelihood,n,"likelihood",1),1))) {

                    current_statement_begin__ = 169;
                    lp_accum__.add(phma_fnormal_lpdf<propto__>(get_base1(yi,n,"yi",1), get_base1(theta,n,"theta",1), stan::math::sqrt(get_base1(vi,n,"vi",1)), alpha, eta, pstream__));
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("theta0");
        names__.push_back("tau");
        names__.push_back("eta");
        names__.push_back("theta");
        names__.push_back("log_lik");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((k - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_phma_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double theta0 = in__.scalar_constrain();
        double tau = in__.scalar_lb_constrain(0);
        vector_d eta = in__.simplex_constrain((k - 1));
        vector<double> theta;
        size_t dim_theta_0__ = N;
        for (size_t k_0__ = 0; k_0__ < dim_theta_0__; ++k_0__) {
            theta.push_back(in__.scalar_constrain());
        }
        vars__.push_back(theta0);
        vars__.push_back(tau);
            for (int k_0__ = 0; k_0__ < (k - 1); ++k_0__) {
            vars__.push_back(eta[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(theta[k_0__]);
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {



            // validate transformed parameters

            // write transformed parameters
            if (include_tparams__) {
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 177;
            validate_non_negative_index("log_lik", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  log_lik(static_cast<Eigen::VectorXd::Index>(N));
            (void) log_lik;  // dummy to suppress unused var warning

            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik,DUMMY_VAR__);


            current_statement_begin__ = 179;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 180;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            phma_normal_lpdf(get_base1(yi,n,"yi",1),get_base1(theta,n,"theta",1),stan::math::sqrt(get_base1(vi,n,"vi",1)),alpha,eta, pstream__), 
                            "assigning variable log_lik");
            }

            // validate generated quantities
            current_statement_begin__ = 177;

            // write generated quantities
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_phma";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= (k - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= ((k - 1) - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}

typedef model_phma_namespace::model_phma stan_model;


#endif
